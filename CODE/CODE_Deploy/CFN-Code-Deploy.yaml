#Step-1: Code Deploy - Cloudfromation templates.
#Ste-2: About appspec.yaml and scripts.
#Step-3: Create Code Deploy Service Role.
#Step-4: Create Code Deploy Application.cd
#Step-5: Create CodeDeploy Deployment Group.
#Step-6: Create the Stack and Verify the Following.
      # 1.Application.
      # 2. Deployment Group.
#Step-6: Create Code Deploy Deployment.
#1. update codebuild packaging to ZIP file.
#2. verify Deployment.
#3. Access Application Deploymet in EC2 Apps stack.

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Master stack for Code deploy  Cloudformation templates'

Parameters: 
  ApplicationrepoName:
    Type: String 
    Description: Name of the repo which contains the rest Application
    Default: ccdemo-java
  ArtifactStoreS3Location:
    Type: String
    Description: Name of s3 bucket
    Default: restapi-apps-4687
#Create the IAM roles 
Resources:      

  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties: 
     # RoleName: !Sub CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:  
                - codebuild.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies: 
        - PolicyName: CodeBuildCICDAcessPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action: "*"
              Resource: "*"
               # - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ApplicationrepoName}
            - Effect: Allow
              Action:  
                - "logs:CreationLogGroup"
                - "Logs:CreateLogStream"
                - "logs:PutLogEvents"   
              Resource: "*"
               # - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
            - Effect: Allow 
              Action: 
                - "s3:Putobject"
                - "s3:Getobject"
                - "s3:getobjectVersion"
                - "s3:ListBucket"
              Resource: "*"
               # - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                #- Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}/*
               # - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}

  #Create codebuild Cfn Templates.
  BuildRestAppCfnProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub BuildRestAppCfnProject-${AWS::StackName}
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Description: Build war file for rest Application
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreS3Location
        Name: !Sub BuildRestAppCfnProject-${AWS::StackName}
        Packaging: ZIP
      Environment: 
        Type: LINUX_CONTAINER  
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
    # source code path. 
      Source: 
        Auth: 
          Type: OAUTH
        Location: https://github.com/radhakrishna4687/ccdemo-java.git #!Sub https://git-dcodecommit.us-east-1.amazon.aws.com/v1/${ApplicationrepoName}   #Here the code commite http url# 
        Type: GITHUB
      Triggers: 
        Webhook: true  
      TimeoutInMinutes: 15  
      Tags:
        - Key: Name
          Value: !Sub BuildRestAppCfnProject-${AWS::StackName}
# code deploy service Role.
  CodeDeployServicerole:
    Type: "AWS::IAM::Role"
    Properties: 
     # RoleName: !Sub CodeDeployServiceRole-${AWS::StackName}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow 
              Principal: 
                Service: 
                  - codedeploy.amazonaws.com
              Action: 
                - "sts:AssumeRole"
        Path: /
        Policies: 
          - PolicyName: "CodeDeployCICDAcessPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                - Effect: Allow 
                  Action:
                    - 'ec2:DescribeInstances'
                    - 'ec2:DescribeInstanceStatus'
                    - 'ec2:TerminateInstances'
                    - 'tag:GetTags' 
                    - 'tag:GetResources'
                    - 'cloudwatch:DescribeAlarms'
                    - 'cloudwatch:PutMetricAlarm'    
                  Resource: '*'            
# Code Deploy Application.
  CodeDeployApplication: 
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub RestApp-${AWS::StackName}
      ComputePlatform: Server 
#code Deplyment group
  CodeDeployementGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters:
        - Key: Name 
          Value: dev 
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt CodeDeployServicerole.Arn
      DeploymentGroupName: !Sub DeploymentGroupName-${AWS::StackName}


          
      

